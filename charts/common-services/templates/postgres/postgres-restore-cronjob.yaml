{{- if and .Values.postgresql.enabled (and ((.Values.postgresql).backup).enabled | default false) }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: postgres-restore-cronjob
  labels:
    {{- include "common-services.labels" . | nindent 4 }}
spec:
  schedule: "* * 31 2 *" # a cron that never runs
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: postgres-restore
            image: postgres:15.2
            env:
            - name: PGHOST
              value: postgresql
            - name: PGUSER
              value: postgres
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgresql
                  key: postgres-password
            - name: S3_BUCKETNAME
              value: {{ (.Values.postgresql.backup).s3bucketName | default "" }}
            - name: LATEST_BACKUP_FILENAME
              value: {{ (.Values.postgresql.backup).latestBackupName | default "postgresql-latest.sql.gz" }}
            - name: S3_FOLDERNAME
              value: {{ (.Values.postgresql.backup).folderName | default "postgresql" }}
            command:
            - "/bin/bash"
            - "-c"
            - |
              set -ex
              apt-get update && apt-get -y install postgresql-client awscli
              aws sts get-caller-identity
              aws s3 cp s3://$S3_BUCKETNAME/$S3_FOLDERNAME/$LATEST_BACKUP_FILENAME /backup/$LATEST_BACKUP_FILENAME
              if [ -f /backup/$LATEST_BACKUP_FILENAME ]; then
                gunzip -c /backup/$LATEST_BACKUP_FILENAME | psql --host=$PGHOST --username=$PGUSER
              else
                echo "$LATEST_BACKUP_FILENAME does not exist"
              fi;
            volumeMounts:
            - name: backup-volume
              mountPath: /backup
          restartPolicy: Never
          volumes:
          - name: backup-volume
            emptyDir: {}
          {{- with .Values.nodeSelector }}
          nodeSelector:
            {{- toYaml . | nindent 12 }}
          {{- end }}
  {{- with .Values.jobConcurrency }}
  concurrencyPolicy: {{ .concurrencyPolicy | quote }}
  {{- if .startingDeadlineSeconds }}
  startingDeadlineSeconds: {{ .startingDeadlineSeconds }}
  {{- end }}
  {{- end }}
{{- end }}

