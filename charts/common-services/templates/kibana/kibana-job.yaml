{{- if eq .Values.kibana.enabled true }}
apiVersion: batch/v1
kind: Job
metadata:
  name: kibana-import
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "5"
spec:
  backoffLimit: 5
  ttlSecondsAfterFinished: 600
  template:
    spec:
      {{- with .Values.kibana.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      restartPolicy: OnFailure
      volumes:
      - name: kibana-data
        configMap:
          name: kibana-data
          defaultMode: 0777
      initContainers:
      - name: wait-for-kibana
        image: alpine:3.14
        command:
        - 'sh'
        - '-c'
        - |
          apk add --no-cache curl jq
          set -e
          KIBANA_URL="http://{{ .Values.kibana.fullnameOverride | default "kibana" }}.{{ .Release.Namespace }}.svc.cluster.local:5601{{ .Values.kibana.healthCheckPath | default "/kibana" }}"
          AUTH_HEADER=""
          if [ "${AUTH_ENABLED}" = "true" ]; then
            AUTH_HEADER="-u ${ELASTICSEARCH_USERNAME}:${ELASTICSEARCH_PASSWORD}"
          fi
          echo "Waiting for Kibana to be accessible..."
          until curl -s $AUTH_HEADER "${KIBANA_URL}" > /dev/null; do
            echo "Kibana is not yet accessible. Retrying in 10 seconds..."
            sleep 10
          done
          echo "Kibana is accessible. Checking API status..."
          until curl -s $AUTH_HEADER "${KIBANA_URL}/api/status" | jq -e '.status.overall.state == "green"' > /dev/null; do
            echo "Kibana is not yet green. Retrying in 10 seconds..."
            sleep 10
          done
          echo "Kibana is green and ready."
        env:
        - name: KIBANA_URL
          value: "http://{{ .Values.kibana.fullnameOverride | default "kibana" }}.{{ .Release.Namespace }}.svc.cluster.local:5601{{ .Values.kibana.healthCheckPath | default "/kibana" }}"
        {{- $username := "" }}
        {{- $password := "" }}
        {{- range .Values.kibana.extraEnvs }}
        {{- if eq .name "ELASTICSEARCH_USERNAME" }}
        {{- $username = .value }}
        {{- end }}
        {{- if eq .name "ELASTICSEARCH_PASSWORD" }}
        {{- $password = .value }}
        {{- end }}
        {{- end }}
        {{- if and $username $password }}
        - name: ELASTICSEARCH_USERNAME
          value: {{ $username | quote }}
        - name: ELASTICSEARCH_PASSWORD
          value: {{ $password | quote }}
        - name: AUTH_ENABLED
          value: "true"
        {{- else }}
        - name: AUTH_ENABLED
          value: "false"
        {{- end }}
      containers:
      - name: kibana-import
        image: alpine:3.14
        imagePullPolicy: IfNotPresent
        env:
        - name: KIBANA_URL
          value: "http://{{ .Values.kibana.fullnameOverride | default "kibana" }}.{{ .Release.Namespace }}.svc.cluster.local:5601{{ .Values.kibana.healthCheckPath | default "/kibana" }}"
        {{- if and $username $password }}
        - name: ELASTICSEARCH_USERNAME
          value: {{ $username | quote }}
        - name: ELASTICSEARCH_PASSWORD
          value: {{ $password | quote }}
        - name: AUTH_ENABLED
          value: "true"
        {{- else }}
        - name: AUTH_ENABLED
          value: "false"
        {{- end }}
        command: ["/bin/sh", "-c"]
        args:
        - |
          apk add --no-cache curl jq
          /kibana/curl-script.sh
        volumeMounts:
        - name: kibana-data
          mountPath: /kibana/
{{- end }}
