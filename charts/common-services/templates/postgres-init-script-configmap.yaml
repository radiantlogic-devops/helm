{{- if eq .Values.postgresql.enabled true }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-script
data:
  01_sdc_init_script.sql: |
    CREATE DATABASE {{ .Values.postgresql.databases.sdc.databaseName }};
    CREATE USER {{ .Values.postgresql.databases.sdc.user }} WITH ENCRYPTED PASSWORD '{{ .Values.postgresql.databases.sdc.password }}';
    GRANT ALL PRIVILEGES ON DATABASE agentsdb TO {{ .Values.postgresql.databases.sdc.user }};
  02_eoc_init_script.sql: |
    CREATE DATABASE {{ .Values.postgresql.databases.eoc.databaseName }};
    CREATE USER {{ .Values.postgresql.databases.eoc.user }} WITH ENCRYPTED PASSWORD '{{ .Values.postgresql.databases.eoc.password }}';
    GRANT ALL PRIVILEGES ON DATABASE eocdb TO {{ .Values.postgresql.databases.eoc.user }};
  XX_create_schema_init_script.sh: |
    #!/bin/bash
    PGPASSWORD=$POSTGRES_PASSWORD psql -v ON_ERROR_STOP=1 <<-EOSQL
      \connect {{ .Values.postgresql.databases.eoc.databaseName }};
      CREATE SCHEMA IF NOT EXISTS {{ .Values.postgresql.databases.eoc.schema }};
      GRANT ALL ON SCHEMA {{ .Values.postgresql.databases.eoc.schema }} TO {{ .Values.postgresql.databases.eoc.user }};
      GRANT ALL ON SCHEMA public TO {{ .Values.postgresql.databases.eoc.user }};
      \connect {{ .Values.postgresql.databases.sdc.databaseName }};
      CREATE SCHEMA IF NOT EXISTS {{ .Values.postgresql.databases.sdc.schema }};
      GRANT ALL ON SCHEMA {{ .Values.postgresql.databases.sdc.schema }} TO {{ .Values.postgresql.databases.sdc.user }};
      GRANT ALL ON SCHEMA public TO {{ .Values.postgresql.databases.sdc.user }};
    EOSQL
{{- end }}
